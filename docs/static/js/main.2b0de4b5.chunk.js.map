{"version":3,"sources":["components/Header.js","components/Prediction.js","components/Form.js","components/FilterButton.js","components/PredictionBlock.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Prediction","props","useState","isEditing","setEditing","newGuess","setnewGuess","editingTemplate","onSubmit","e","preventDefault","editPrediction","id","type","value","onChange","target","placeholder","guess","required","autoComplete","onClick","viewTemplate","htmlFor","defaultChecked","outcome","togglePredictionOutcome","deletePrediction","Form","setGuess","setid","newid","getid","length","fetch","method","headers","body","JSON","stringify","owner","guessOwner","then","catch","err","console","log","addid","addPrediction","FilterButton","aria-pressed","setFilter","FILTER_MAP","All","Correct","prediction","Incorrect","FILTER_NAMES","Object","keys","PredictionBlock","filter","setId","predictions","setPredictions","maxId","res","json","data","max","updatedPredictions","map","remainingpredictions","editedpredictionList","predictionList","filterList","name","isPressed","aria-labelledby","newprediction","App","chrisData","setChrisData","seanData","setSeanData","forEach","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2b0de4b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.css';\r\n\r\nfunction Header() {\r\n\r\n    return(\r\n        <div className=\"header\">\r\n            <div className=\"header__textbox\">\r\n                <h1 className=\"heading__primary\">2021 Video Game Predictions</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport './prediction.css';\r\nimport './button.css';\r\n\r\nexport default function Prediction(props) {\r\n\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [newGuess, setnewGuess] = useState('');\r\n\r\n  function handleChange(e) {\r\n    setnewGuess(e.target.value)\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    props.editPrediction(props.id, newGuess);\r\n    setnewGuess(\"\")\r\n    setEditing(false)\r\n  }\r\n\r\n  const editingTemplate = (\r\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <input \r\n          id={props.id} \r\n          className=\"text form__input\" \r\n          type=\"text\" \r\n          value={newGuess} \r\n          onChange={handleChange}\r\n          placeholder={props.guess}\r\n          required\r\n          autoComplete=\"off\"\r\n        />\r\n      </div>\r\n      <div className=\"btn-group\">\r\n        <button type=\"button\" className=\"btn cancel\" onClick={() => setEditing(false)}>\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\" className=\"btn btn__primary edit\">\r\n          Save\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n  const viewTemplate = (\r\n    <div>\r\n      <div>\r\n        <label htmlFor={props.id}>\r\n        <p className=\"prediction__text\"> {props.guess} </p>\r\n        </label>\r\n        <input\r\n          className=\"prediction__checkbox\"\r\n          id={props.id}\r\n          type=\"checkbox\"\r\n          defaultChecked={props.outcome}\r\n          onChange={() => props.togglePredictionOutcome(props.id, props.outcome)}\r\n        />\r\n      </div>\r\n      <div >\r\n        <button type=\"button\" className=\"btn\"  onClick={() => setEditing(true)}>\r\n          Edit \r\n        </button>\r\n        <button\r\n          className=\"btn\"\r\n          type=\"button\"\r\n          onClick={() => props.deletePrediction(props.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  //Always runs after a component is rendered\r\n  //If editing, focus on the current ref text box or edit button\r\n\r\n  return (\r\n    <li className=\"prediction__item\">\r\n      {isEditing ? editingTemplate : viewTemplate}\r\n    </li>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport \"./form.css\";\r\n\r\nfunction Form(props) {\r\n\r\n    //Usestate gives us both name and setname, here we destructure\r\n    //name is set here to empty string\r\n    const [guess, setGuess] = useState('');\r\n    const [id, setid] = useState(0);\r\n\r\n\r\n    function handleChange(e) {\r\n      setGuess(e.target.value);\r\n      setid(props.getid);\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        let newid = props.getid();\r\n        setid(newid + 1)\r\n        e.preventDefault();\r\n        if (guess.length !== 0) {\r\n            fetch('https://glacial-castle-18259.herokuapp.com/addguess', {\r\n              method: 'post',\r\n              headers: {'Accept': 'application/json', 'Content-Type': 'application/json'},\r\n              body: JSON.stringify({\r\n                id: newid + 1,\r\n                guess: guess,\r\n                owner: props.guessOwner,\r\n                outcome: false\r\n              })\r\n            })\r\n            .then()\r\n            .catch(err => console.log(err))\r\n            props.addid();\r\n            props.addPrediction(guess);\r\n            setGuess('');\r\n          }\r\n        }\r\n        \r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={handleSubmit}>\r\n        <input\r\n          className=\"form__input\"\r\n          type=\"text\"\r\n          guess=\"text\"\r\n          autoComplete=\"off\"\r\n          value={guess}\r\n          onChange={handleChange}\r\n          placeholder=\"Create a new prediction\"\r\n        />\r\n        {/* <button className=\"btn form__button\" type=\"submit\">\r\n          Add\r\n        </button> */}\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './button.css'\r\n\r\nfunction FilterButton(props) {\r\n    return (\r\n        <button className=\"btn\"\r\n          type=\"button\" \r\n          aria-pressed=\"true\" \r\n          onClick={() => props.setFilter(props.guess)}\r\n          >\r\n          <span>{props.guess}</span>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default FilterButton;","import React, { useState } from \"react\";\r\nimport Prediction from \"./Prediction\";\r\nimport Form from \"./Form\";\r\nimport FilterButton from \"./FilterButton\";\r\nimport './predictionBlock.css';\r\n\r\n\r\n//Goes outside app as this doesn't change when App gets updated\r\nconst FILTER_MAP = {\r\n  All: () => true,\r\n  Correct: prediction => prediction.outcome,\r\n  Incorrect: prediction => !prediction.outcome\r\n};\r\n\r\n//Can now refer to filter names to run the associated function of that object which is listed above\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nfunction PredictionBlock(props) {\r\n\r\n  //Default state is to show ALL the predictions\r\n  const [filter, setFilter] = useState('All');\r\n  const [id, setId] = useState(0);\r\n  const [predictions, setPredictions] = useState(props.predictions);\r\n\r\n  function currentid() {\r\n    maxId();\r\n    return id;\r\n  }\r\n\r\n  function addid() {\r\n    setId(id + 1);\r\n  }\r\n  \r\n  function maxId() {\r\n    fetch('https://glacial-castle-18259.herokuapp.com/returnid')\r\n        .then(res => res.json())\r\n        .then(data =>  { \r\n          setId(data[0].max)\r\n        })\r\n        .catch(err => console.log(err))\r\n  }\r\n\r\n  function addPrediction(guess) {\r\n    //addid is called prior to this function call so id is already added\r\n    const newprediction = {\r\n      id: \"prediction=\" + id,\r\n      guess: guess,\r\n      outcome: false\r\n    };\r\n    //Set the state of predictions to old predictions pushing new prediction at the end\r\n    setPredictions([...predictions, newprediction]);\r\n    addid();\r\n  }\r\n\r\n  function togglePredictionOutcome(id, outcome) {\r\n    const updatedPredictions = predictions.map(prediction => {\r\n      if (id === prediction.id) {\r\n        fetch('https://glacial-castle-18259.herokuapp.com/editoutcome', {\r\n          method: 'post',\r\n          headers: {'Accept': 'application/json', 'Content-Type': 'application/json'},\r\n          body: JSON.stringify({\r\n            id: id,\r\n            outcome: outcome\r\n          })\r\n        })\r\n        .then()\r\n        .catch(err => console.log(err))\r\n        return { ...prediction, outcome: !prediction.outcome }\r\n      }\r\n      return prediction;\r\n    });\r\n\r\n    \r\n\r\n    setPredictions(updatedPredictions);\r\n  }\r\n\r\n  function deletePrediction(id) {\r\n    fetch('https://glacial-castle-18259.herokuapp.com/delete', {\r\n      method: 'post',\r\n      headers: {'Accept': 'application/json', 'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        id: id\r\n      })\r\n    })\r\n      .then()\r\n      .catch(err => console.log(err))\r\n    const remainingpredictions = predictions.filter(prediction => id !== prediction.id);\r\n    setPredictions(remainingpredictions);\r\n  }\r\n\r\n  function editPrediction(id, newGuess) {\r\n    const editedpredictionList = predictions.map(prediction => {\r\n      if (id === prediction.id) {\r\n        return { ...prediction, guess: newGuess }\r\n      }\r\n      return prediction;\r\n    });\r\n\r\n    fetch('https://glacial-castle-18259.herokuapp.com/editguess', {\r\n      method: 'post',\r\n      headers: {'Accept': 'application/json', 'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        id: id,\r\n        guess: newGuess\r\n      })\r\n    })\r\n    .then()\r\n    .catch(err => console.log(err))\r\n\r\n    setPredictions(editedpredictionList);\r\n  }\r\n\r\n  const predictionList = predictions\r\n    .filter(FILTER_MAP[filter])\r\n    .map(prediction => (\r\n      <Prediction\r\n        id={prediction.id}\r\n        guess={prediction.guess}\r\n        outcome={prediction.outcome}\r\n        key={prediction.id}\r\n        togglePredictionOutcome={togglePredictionOutcome}\r\n        deletePrediction={deletePrediction}\r\n        editPrediction={editPrediction}\r\n      />\r\n    ));\r\n\r\n  const filterList = FILTER_NAMES.map(name => (\r\n    <FilterButton\r\n      key={name}\r\n      guess={name}\r\n      isPressed={name === filter}\r\n      setFilter={setFilter}\r\n    />\r\n  ));\r\n\r\n  maxId();\r\n\r\n  return (\r\n    <div className=\"prediction__block\">\r\n      <h1 className=\"prediction__heading\">{props.name}</h1>\r\n      <div className=\"prediction__filters\">\r\n        {filterList}\r\n      </div>\r\n      <ul className=\"prediction__list\"\r\n        aria-labelledby=\"list-heading\">\r\n        {predictionList}\r\n      </ul>\r\n      <Form\r\n        guessOwner={props.owner}\r\n        addPrediction={addPrediction}\r\n        getid={currentid}\r\n        addid={addid}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PredictionBlock;\r\n","\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Header from './components/Header';\r\nimport PredictionBlock from './components/PredictionBlock';\r\n\r\nfunction App(props) {\r\n\r\n  function getData() {\r\n    fetch('https://glacial-castle-18259.herokuapp.com/')\r\n    .then(res => res.json())\r\n    .then(predictions => {\r\n      predictions.forEach(prediction => {\r\n        if (prediction.owner === \"Chris\") {\r\n        setChrisData(chrisData.push(prediction));\r\n        }\r\n        if (prediction.owner === \"Sean\"){\r\n          setSeanData(seanData.push(prediction));\r\n        }\r\n      });\r\n    })\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  const [chrisData, setChrisData] = useState([])\r\n  const [seanData, setSeanData] = useState([])\r\n  const [userloggedin, setuserloggedin] = useState(\"Sean\");\r\n  \r\n \r\n  getData();\r\n\r\n  // const SEANDATA = [\r\n  //   { id: \"prediction-0\", guess: \"BloodbornEe 2 comes to PC\", outcome: false },\r\n  //   { id: \"prediction-1\", guess: \"Monolith Soft finally show off new IP\", outcome: false },\r\n  //   { id: \"prediction-2\", guess: \"The first racing game that doesn't suck in 10 years finally comes out and it's a Burnout game made by Criterion\", outcome: false },\r\n  // ];\r\n  \r\n  // const CCHRISDATA = [\r\n  //   { id: \"prediction-0\", name: \"Demon's Souls Remake gets 100 on metacritic\", outcome: false },\r\n  //   { id: \"prediction-1\", name: \"The first racing game that doesn't suck in 10 years finally comes out and it's a Burnout game made by Criterion\", outcome: false },\r\n  // ];\r\n\r\n    return (\r\n\r\n      <div>\r\n        <Header />\r\n        <div className=\"Apparea\">\r\n          <PredictionBlock owner=\"Sean\" name=\"Sean's Predictions\" predictions={seanData}/>\r\n          <PredictionBlock owner=\"Chris\" name=\"Chris' predictions\" predictions={chrisData} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n// const DATA = [\r\n//   { id: \"todo-0\", name: \"Eat\", completed: false },\r\n//   { id: \"todo-1\", name: \"Sleep\", completed: false },\r\n//   { id: \"todo-2\", name: \"Repeat\", completed: false }\r\n// ];\r\n\r\nReactDOM.render(\r\n  <App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}